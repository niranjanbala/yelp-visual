/*
 * File: app/view/GMapPanel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.GMapPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.gmappanel',

    requires: [
        'Ext.window.MessageBox'
    ],

    plain: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            markers: [
                
            ],
            centerPoint: {
                geoCodeAddr: '8941 N Black Canyon Hwy Phoenix, AZ 85021'
            }
        });

        me.callParent(arguments);
    },

    afterFirstLayout: function() {
        var center = this.centerPoint;
        this.callParent();       
        if (center) {    
            if (center.geoCodeAddr) {
                this.lookupCode(center.geoCodeAddr, center.marker);
            } else {
                this.createMap(center);
            }
        } else {
            Ext.Error.raise('center is required');
        }
    },

    createMap: function(center, marker) {
        options = Ext.apply({}, this.mapOptions);
        options = Ext.applyIf(options, {
            zoom: 14,
            center: center,
            mapTypeId: google.maps.MapTypeId.HYBRID
        });
        var mapObject = new google.maps.Map(this.body.dom, options);
        this.gmap=mapObject;
        var store=Ext.create('MyApp.store.MarkerStore');
        store.on('load', function(v,r,success) {
            this.clearMarkers();
            console.log(r.length);
            Ext.each(r, function(item, index){
                this.addMarker(item);
            },this);    
        },this);
        this.markers=[];
        google.maps.event.addListener(mapObject, 'zoom_changed', function() {
            var zoomLevel = mapObject.getZoom();
            var ne=mapObject.getBounds().getNorthEast();        
            var sw=mapObject.getBounds().getSouthWest();        
        });
        var centerChanged=false;

        google.maps.event.addListener(mapObject, 'center_changed', function() {
            centerChanged=true;
        });
        google.maps.event.addListener(mapObject, 'idle', function(event) { 
            // fires when movement has stopped 
            if(centerChanged===true) {
                centerChanged=false;
                var zoomLevel = mapObject.getZoom();        
                var ne=mapObject.getBounds().getNorthEast();        
                var sw=mapObject.getBounds().getSouthWest();        
                var urlParams="lat1="+sw.lat()+"&lat2="+ne.lat()+"&lon1="+sw.lng()+"&lon2="+ne.lng()+"&zoomLevel="+zoomLevel;
                store.load({params: urlParams});
            }
        });
        //Ext.each(this.markers, this.addMarker, this);
    },

    addMarker: function(markerData) {
        var location=new google.maps.LatLng(markerData.get('y'),markerData.get('x'));
        var marker = new google.maps.Marker({
            position: location,
            map: this.gmap,
            title: markerData.get('label')
        });
        this.markers.push(marker);
        return marker;
    },

    lookupCode: function(addr, marker) {
        this.geocoder = new google.maps.Geocoder();
        this.geocoder.geocode({
            address: addr
        }, Ext.Function.bind(this.onLookupComplete, this, [marker], true)
        );
    },

    onLookupComplete: function(data, response, marker) {
        if (response != 'OK') {
            Ext.MessageBox.alert('Error', 'An error occured: "' + response + '"');
            return;
        }
        this.createMap(data[0].geometry.location, marker);
    },

    afterComponentLayout: function(w, h) {
        this.callParent(arguments);
        this.redraw();
    },

    redraw: function() {
        var map = this.gmap;
        if (map) {
            google.maps.event.trigger(map, 'resize');
        }
    },

    clearMarkers: function() {
        if (this.markers) {
            Ext.each(this.markers,function(item,index){
                item.setMap(null);
            });
        }
        this.markers=[];
    }

});